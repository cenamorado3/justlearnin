# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %%
from IPython import get_ipython


# %%
from sklearn.datasets import load_svmlight_file
import pandas as PANDA
import sklearn as svm
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
import sklearn.svm as skl
import seaborn as sns
import matplotlib as plot
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
#from sklearn.neural_network import SVDCClassifier
import numpy as np
import matplotlib.pyplot as plt
from sklearn import linear_model
get_ipython().magic('matplotlib inline')


# %%
dataset = PANDA.read_csv('winequality-red.csv')
dataset.head()


# %%
X = dataset.drop('quality', axis=1)
y = dataset['quality']
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=.2, random_state=42)
X_train[:10]


# %%
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)


# %%
X_train[:10]

# %% [markdown]
# <strong><h1>RFC CLASSIFIER<h1/></strong>

# %%
rfc = RandomForestClassifier(n_estimators=100)
rfc.fit(X_train, y_train)
pred_rfc = rfc.predict(X_test)

# %% [markdown]
# <strong>Classification Report</strong>

# %%
print(classification_report(y_test, pred_rfc))

# %% [markdown]
# <strong><h1>(SVC)Support Vector Classification CLASSIFIER<h1/></strong>

# %%
clf = skl.SVC()
clf.fit(X_train,y_train)
pred_clf = clf.predict(X_test)
pred_clf

# %% [markdown]
# <strong>Classification Report</strong>

# %%
print(classification_report(y_test, pred_rfc))

# %% [markdown]
# <strong><h1>Neaural Network<h1/></strong>
# %% [markdown]
# MLP Classifier

# %%
mlpc = MLPClassifier(hidden_layer_sizes=(11,11,11), max_iter=500)
mlpc.fit(X_train, y_train)
pred_mlpc = mlpc.predict(X_test)

# %% [markdown]
# <strong>Classification Report</strong>

# %%
print(classification_report(y_test, pred_rfc))

# %% [markdown]
# <strong>Classification Report/ Matching Matrix</strong>

# %%
conf = confusion_matrix(y_test, pred_mlpc)
sns.heatmap(conf, fmt='.2%')


# %%
plt.bar(dataset['quality'], dataset['residual sugar'])
plt.xlabel('Quality')
plt.ylabel('Sugar')


